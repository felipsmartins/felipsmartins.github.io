{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vindo a documenta\u00e7\u00e3o do FastSeller XT Se voc\u00ea quer uma vis\u00e3o geral do projeto ou c\u00f3digo-fonte, visite github . Introdu\u00e7\u00e3o Este projeto \u00e9 sobre um sistema que tem como finalidade fazer a gest\u00e3o das vers\u00f5es publicadas/disponibilizadas do aplicativo FastSeller XT para os clientes/usu\u00e1rios deste sistema. Todas as a\u00e7\u00f5es principais para este gerenciamento \u00e9 feita atrav\u00e9s dos endpoints da API . Para onde ir agora? Para come\u00e7ar a interagir com a API, siga com as intru\u00e7\u00f5es de instala\u00e7\u00e3o na p\u00e1gina a seguir. Nota : \u00c9 interessante ler a se\u00e7\u00e3o a seguir para familiarizar-se com a terminologia usada durante a leitura da documenta\u00e7\u00e3o. Terminologia Customer: Um cliente, parceiro, empresa ou qualquer usu\u00e1rio que recebe um release. Release: Isso pode ter \u00e0s vezes o mesmo valor sem\u00e2ntico de \"vers\u00e3o\" (ver abaixo). Estritamente falando, release diz respeito a um lan\u00e7amento, que pode ter coomo atributo data do release , code name , c\u00f3digo da vers\u00e3o (ex.: 1.2.3) , etc. Vers\u00e3o : \u00c9 um identificador \"num\u00e9rico\" ou c\u00f3digo da vers\u00e3o do release, algo como 0.2.3 . Nesse projeto, tomamos como inspira\u00e7\u00e3o o Semantic Versioning . App Publishing : Representa um espec\u00edfico release disponibilizado para um usu\u00e1rio do app. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release. Customer , cliente , usu\u00e1rio , empresa , parceiro s\u00e3o termos intercambi\u00e1veis aqui.","title":"Primeiros passos"},{"location":"#bem-vindo-a-documentacao-do-fastseller-xt","text":"Se voc\u00ea quer uma vis\u00e3o geral do projeto ou c\u00f3digo-fonte, visite github .","title":"Bem-vindo a documenta\u00e7\u00e3o do FastSeller XT"},{"location":"#introducao","text":"Este projeto \u00e9 sobre um sistema que tem como finalidade fazer a gest\u00e3o das vers\u00f5es publicadas/disponibilizadas do aplicativo FastSeller XT para os clientes/usu\u00e1rios deste sistema. Todas as a\u00e7\u00f5es principais para este gerenciamento \u00e9 feita atrav\u00e9s dos endpoints da API . Para onde ir agora? Para come\u00e7ar a interagir com a API, siga com as intru\u00e7\u00f5es de instala\u00e7\u00e3o na p\u00e1gina a seguir. Nota : \u00c9 interessante ler a se\u00e7\u00e3o a seguir para familiarizar-se com a terminologia usada durante a leitura da documenta\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"#terminologia","text":"Customer: Um cliente, parceiro, empresa ou qualquer usu\u00e1rio que recebe um release. Release: Isso pode ter \u00e0s vezes o mesmo valor sem\u00e2ntico de \"vers\u00e3o\" (ver abaixo). Estritamente falando, release diz respeito a um lan\u00e7amento, que pode ter coomo atributo data do release , code name , c\u00f3digo da vers\u00e3o (ex.: 1.2.3) , etc. Vers\u00e3o : \u00c9 um identificador \"num\u00e9rico\" ou c\u00f3digo da vers\u00e3o do release, algo como 0.2.3 . Nesse projeto, tomamos como inspira\u00e7\u00e3o o Semantic Versioning . App Publishing : Representa um espec\u00edfico release disponibilizado para um usu\u00e1rio do app. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release. Customer , cliente , usu\u00e1rio , empresa , parceiro s\u00e3o termos intercambi\u00e1veis aqui.","title":"Terminologia"},{"location":"api/","text":"Vis\u00e3o geral Esta p\u00e1gina descreve os recursos e endpoints da aplica\u00e7\u00e3o FastSeller XT REST API. Os recursos da API podem ser acessados livremente, n\u00e3o h\u00e1 qualquer autentica\u00e7\u00e3o. Os recursos abordados a seguir s\u00e3o: Customers Releases App Publishing Nota 1: Talvez voc\u00ea queira voltar a se\u00e7\u00e3o sobre terminologia apresentada na p\u00e1gina de introdu\u00e7\u00e3o . Nota 2: para efeitos de illustra\u00e7\u00e3o, vamos assumir durante o documento que o endere\u00e7o da API \u00e9: http://127.0.0.1/api/v1 CRUD: Create, Retrieve, Update and Destroy Para executar uma a\u00e7\u00e3o sobre um dado recurso, uma requisi\u00e7\u00e3o HTTP \u00e9 feita para um URL que um identifica usando um verbo HTTP apropriado. Verbo Descri\u00e7\u00e3o HEAD Pode ser emitido contra um recurso para obter informa\u00e7\u00f5es de HTTP header GET Usado para recuperar recursos POST Usado para criar recursos PUT Usado para atualizar um dado recurso DELETE Usado para atualizar um dado recurso A representa\u00e7\u00e3o interna das entidades \u00e9 com segue: Acesso da API pelo navegador Como esta aplica\u00e7\u00e3o est\u00e1 no topo do DRF, ent\u00e3o podemos nos beneficiar da Browsable API , digitando o endere\u00e7o (ex: http://127.0.0.1:8000/api/v1/ ) no navegador: Ou a vers\u00e3o em JSON: http://127.0.0.1:8000/api/v1/?format=json . A se\u00e7\u00e3o seguinte lista e documenta as opera\u00e7\u00f5es sobre os endpoints. Customers endpoint GET - Listagem curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/customers' Exemplo de retorno [ { uuid : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , name : FooBar LTDA }, { uuid : 4e888c18-5819-4da1-b4b9-0d495f7a4a2a , name : ALIANCA DISTRIBUIDORES LTD } ] POST - Criando um cliente Par\u00e2metros: nome tipo descri\u00e7\u00e3o name string O nome do cliente curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/customers' \\ -d '{ name : EMPRESA XYZ }' Exemplo de retorno { uuid : e44ded41-e6f9-4cdb-a136-0f2d8977f2bb , name : EMPRESA XYZ } PUT - Editando um cliente Par\u00e2metros: nome tipo descri\u00e7\u00e3o name string O nome do cliente curl -H 'Content-Type: application/json' \\ -X 'PUT' 'http://127.0.0.1:8000/api/v1/customers/e44ded41-e6f9-4cdb-a136-0f2d8977f2bb' \\ -d '{ name : EMPRESA ltd }' Exemplo de retorno { uuid : e44ded41-e6f9-4cdb-a136-0f2d8977f2bb , name : EMPRESA ltd } Releases endpoint GET - Listagem curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/releases' Exemplo de retorno [ { uuid : 42cdb17a-5c19-46be-819c-d6a06672c04d , version : 1.2.0 , codename : , release_date : 2019-03-27T05:03:16.467478Z }, { uuid : fb0276a6-11ab-4457-b9a6-ee6ba7e2b6e9 , version : 1.0.1 , codename : Ambar , release_date : 2019-03-27T03:36:39.288735Z } ] POST - Criando um release/vers\u00e3o Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o version string sim O c\u00f3digo da vers\u00e3o, como: 1.0.1 codename string n\u00e3o O code name da vers\u00e3o release_date string n\u00e3o A data de release. Formato ISO8601 Nota O formato para release_date \u00e9 algo como: 2019-03-29T09:40:56-03:00 curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/releases' \\ -d '{ version : 3.1.16 , codename : steel , release_date : 2019-03-29T09:40:56-03:00 }' Exemplo de retorno { uuid : 66c58e53-93f3-4df8-be02-c8670250f851 , version : 3.1.16 , codename : steel , release_date : 2019-03-29T12:40:56Z } PUT - Editando um release Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o version string sim O c\u00f3digo da vers\u00e3o, como: 1.0.1 codename string n\u00e3o O code name da vers\u00e3o curl -H 'Content-Type: application/json' \\ -X 'PUT' 'http://127.0.0.1:8000/api/v1/releases/66c58e53-93f3-4df8-be02-c8670250f851' \\ -d '{ version : 3.1.22 , codename : Bee }' Exemplo de retorno { uuid : 66c58e53-93f3-4df8-be02-c8670250f851 , version : 3.1.22 , codename : Bee , release_date : 2019-03-29T12:40:56Z } App Publishing endpoint Como vimos na parte inicial da documenta\u00e7\u00e3o, na se\u00e7\u00e3o terminologia, uma publica\u00e7\u00e3o representa um espec\u00edfico release do disponibilizado para um cliente. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release. GET - Listagem Par\u00e2metros/filtros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string n\u00e3o nome ou parte do nome de um cliente pub_date string n\u00e3o data (ISO8601) de quando recebeu a atualiza\u00e7\u00e3o version string n\u00e3o vers\u00e3o para filtrar curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/publishing' ou curl -H 'Accept: application/json; indent=4' -X 'GET' \\ 'http://127.0.0.1:8000/api/v1/publishing?customer=LTDA pub_date=2019-03-27T06:40 version=1.2.0' Exemplo de retorno [ { uuid : 2c2f98df-0ede-4315-9c04-bb36a98baf9e , customer : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , release : fb0276a6-11ab-4457-b9a6-ee6ba7e2b6e9 , pub_date : 2019-03-27T06:12:41.293705Z }, { uuid : a99f9767-c7ea-4054-9116-d89522402ebd , customer : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , release : 42cdb17a-5c19-46be-819c-d6a06672c04d , pub_date : 2019-03-27T06:43:22.117721Z } ] POST - Criando/Disponibilizando uma release para um cliente Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string sim o identificador (uuid) de um cliente version string sim o identificador (uuid) de um release customer_id=5bb566f1-d259-4023-a064-6968a3c052f8 release_id=66c58e53-93f3-4df8-be02-c8670250f851 curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' \\ -d '{ customer : $customer_id , release : $release_id }' Exemplo de retorno { uuid : b567193a-a267-4bd0-8652-3c8e7b4ca4c5 , customer : 5bb566f1-d259-4023-a064-6968a3c052f8 , release : 66c58e53-93f3-4df8-be02-c8670250f851 , pub_date : 2019-03-29T16:19:16.891829Z } Poss\u00edveis erros ao tentar atribuir um release para um cliente s\u00e3o descritos a seguir. 1) Vers\u00e3o sendo aplicada \u00e9 mais antiga que a que o cliente possui: curl -iH 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' -d $payload HTTP/1.0 400 Bad Request Server: WSGIServer/0.1 Python/2.7.13 ... { non_field_errors :[ A vers\u00e3o sendo aplicada \u00e9 mais antiga que a que o cliente possui. ]} 2) Cliente j\u00e1 tem a vers\u00e3o que est\u00e1 sendo aplicada. Nesse caso voc\u00ea receber\u00e1 o seguinte retorno: curl -iH 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' -d $payload HTTP/1.0 400 Bad Request Server: WSGIServer/0.1 Python/2.7.13 ... { non_field_errors :[ Cliente j\u00e1 possui esta vers\u00e3o. ]} PUT - Editando um registro de atribui\u00e7\u00e3o de release Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string sim o identificador (uuid) de um cliente version string sim o identificador (uuid) de um release customer_id=5bb566f1-d259-4023-a064-6968a3c052f8 release_id=66c58e53-93f3-4df8-be02-c8670250f851 id=b567193a-a267-4bd0-8652-3c8e7b4ca4c5 curl -H 'Content-Type: application/json' -X 'PUT' 'http://127.0.0.1:8000/api/v1/publishing/$id' \\ -d '{ customer : $customer_id , release : $release_id }' Exemplo de retorno { uuid : b567193a-a267-4bd0-8652-3c8e7b4ca4c5 , customer : 5bb566f1-d259-4023-a064-6968a3c052f8 , release : 66c58e53-93f3-4df8-be02-c8670250f851 , pub_date : 2019-03-29T16:19:16.891829Z } Os demais poss\u00edveis retornos s\u00e3o os mesmos de quando estamos criando um registro via POST. DELETE - Excluindo recursos Para todos os recursos descritos acima, a exclus\u00e3o segue o mesmo padr\u00e3o de request: curl -X 'DELETE' 'http://127.0.0.1:8000/api/v1/{resource}/{id}'","title":"API"},{"location":"api/#visao-geral","text":"Esta p\u00e1gina descreve os recursos e endpoints da aplica\u00e7\u00e3o FastSeller XT REST API. Os recursos da API podem ser acessados livremente, n\u00e3o h\u00e1 qualquer autentica\u00e7\u00e3o. Os recursos abordados a seguir s\u00e3o: Customers Releases App Publishing Nota 1: Talvez voc\u00ea queira voltar a se\u00e7\u00e3o sobre terminologia apresentada na p\u00e1gina de introdu\u00e7\u00e3o . Nota 2: para efeitos de illustra\u00e7\u00e3o, vamos assumir durante o documento que o endere\u00e7o da API \u00e9: http://127.0.0.1/api/v1 CRUD: Create, Retrieve, Update and Destroy Para executar uma a\u00e7\u00e3o sobre um dado recurso, uma requisi\u00e7\u00e3o HTTP \u00e9 feita para um URL que um identifica usando um verbo HTTP apropriado. Verbo Descri\u00e7\u00e3o HEAD Pode ser emitido contra um recurso para obter informa\u00e7\u00f5es de HTTP header GET Usado para recuperar recursos POST Usado para criar recursos PUT Usado para atualizar um dado recurso DELETE Usado para atualizar um dado recurso A representa\u00e7\u00e3o interna das entidades \u00e9 com segue: Acesso da API pelo navegador Como esta aplica\u00e7\u00e3o est\u00e1 no topo do DRF, ent\u00e3o podemos nos beneficiar da Browsable API , digitando o endere\u00e7o (ex: http://127.0.0.1:8000/api/v1/ ) no navegador: Ou a vers\u00e3o em JSON: http://127.0.0.1:8000/api/v1/?format=json . A se\u00e7\u00e3o seguinte lista e documenta as opera\u00e7\u00f5es sobre os endpoints.","title":"Vis\u00e3o geral"},{"location":"api/#customers-endpoint","text":"GET - Listagem curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/customers' Exemplo de retorno [ { uuid : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , name : FooBar LTDA }, { uuid : 4e888c18-5819-4da1-b4b9-0d495f7a4a2a , name : ALIANCA DISTRIBUIDORES LTD } ] POST - Criando um cliente Par\u00e2metros: nome tipo descri\u00e7\u00e3o name string O nome do cliente curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/customers' \\ -d '{ name : EMPRESA XYZ }' Exemplo de retorno { uuid : e44ded41-e6f9-4cdb-a136-0f2d8977f2bb , name : EMPRESA XYZ } PUT - Editando um cliente Par\u00e2metros: nome tipo descri\u00e7\u00e3o name string O nome do cliente curl -H 'Content-Type: application/json' \\ -X 'PUT' 'http://127.0.0.1:8000/api/v1/customers/e44ded41-e6f9-4cdb-a136-0f2d8977f2bb' \\ -d '{ name : EMPRESA ltd }' Exemplo de retorno { uuid : e44ded41-e6f9-4cdb-a136-0f2d8977f2bb , name : EMPRESA ltd }","title":"Customers endpoint"},{"location":"api/#releases-endpoint","text":"GET - Listagem curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/releases' Exemplo de retorno [ { uuid : 42cdb17a-5c19-46be-819c-d6a06672c04d , version : 1.2.0 , codename : , release_date : 2019-03-27T05:03:16.467478Z }, { uuid : fb0276a6-11ab-4457-b9a6-ee6ba7e2b6e9 , version : 1.0.1 , codename : Ambar , release_date : 2019-03-27T03:36:39.288735Z } ] POST - Criando um release/vers\u00e3o Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o version string sim O c\u00f3digo da vers\u00e3o, como: 1.0.1 codename string n\u00e3o O code name da vers\u00e3o release_date string n\u00e3o A data de release. Formato ISO8601 Nota O formato para release_date \u00e9 algo como: 2019-03-29T09:40:56-03:00 curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/releases' \\ -d '{ version : 3.1.16 , codename : steel , release_date : 2019-03-29T09:40:56-03:00 }' Exemplo de retorno { uuid : 66c58e53-93f3-4df8-be02-c8670250f851 , version : 3.1.16 , codename : steel , release_date : 2019-03-29T12:40:56Z } PUT - Editando um release Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o version string sim O c\u00f3digo da vers\u00e3o, como: 1.0.1 codename string n\u00e3o O code name da vers\u00e3o curl -H 'Content-Type: application/json' \\ -X 'PUT' 'http://127.0.0.1:8000/api/v1/releases/66c58e53-93f3-4df8-be02-c8670250f851' \\ -d '{ version : 3.1.22 , codename : Bee }' Exemplo de retorno { uuid : 66c58e53-93f3-4df8-be02-c8670250f851 , version : 3.1.22 , codename : Bee , release_date : 2019-03-29T12:40:56Z }","title":"Releases endpoint"},{"location":"api/#app-publishing-endpoint","text":"Como vimos na parte inicial da documenta\u00e7\u00e3o, na se\u00e7\u00e3o terminologia, uma publica\u00e7\u00e3o representa um espec\u00edfico release do disponibilizado para um cliente. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release. GET - Listagem Par\u00e2metros/filtros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string n\u00e3o nome ou parte do nome de um cliente pub_date string n\u00e3o data (ISO8601) de quando recebeu a atualiza\u00e7\u00e3o version string n\u00e3o vers\u00e3o para filtrar curl -H 'Accept: application/json; indent=4' -X 'GET' 'http://127.0.0.1:8000/api/v1/publishing' ou curl -H 'Accept: application/json; indent=4' -X 'GET' \\ 'http://127.0.0.1:8000/api/v1/publishing?customer=LTDA pub_date=2019-03-27T06:40 version=1.2.0' Exemplo de retorno [ { uuid : 2c2f98df-0ede-4315-9c04-bb36a98baf9e , customer : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , release : fb0276a6-11ab-4457-b9a6-ee6ba7e2b6e9 , pub_date : 2019-03-27T06:12:41.293705Z }, { uuid : a99f9767-c7ea-4054-9116-d89522402ebd , customer : 6193e9b3-7918-4ccc-8c38-be35602df2a1 , release : 42cdb17a-5c19-46be-819c-d6a06672c04d , pub_date : 2019-03-27T06:43:22.117721Z } ] POST - Criando/Disponibilizando uma release para um cliente Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string sim o identificador (uuid) de um cliente version string sim o identificador (uuid) de um release customer_id=5bb566f1-d259-4023-a064-6968a3c052f8 release_id=66c58e53-93f3-4df8-be02-c8670250f851 curl -H 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' \\ -d '{ customer : $customer_id , release : $release_id }' Exemplo de retorno { uuid : b567193a-a267-4bd0-8652-3c8e7b4ca4c5 , customer : 5bb566f1-d259-4023-a064-6968a3c052f8 , release : 66c58e53-93f3-4df8-be02-c8670250f851 , pub_date : 2019-03-29T16:19:16.891829Z } Poss\u00edveis erros ao tentar atribuir um release para um cliente s\u00e3o descritos a seguir. 1) Vers\u00e3o sendo aplicada \u00e9 mais antiga que a que o cliente possui: curl -iH 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' -d $payload HTTP/1.0 400 Bad Request Server: WSGIServer/0.1 Python/2.7.13 ... { non_field_errors :[ A vers\u00e3o sendo aplicada \u00e9 mais antiga que a que o cliente possui. ]} 2) Cliente j\u00e1 tem a vers\u00e3o que est\u00e1 sendo aplicada. Nesse caso voc\u00ea receber\u00e1 o seguinte retorno: curl -iH 'Content-Type: application/json' -X 'POST' 'http://127.0.0.1:8000/api/v1/publishing' -d $payload HTTP/1.0 400 Bad Request Server: WSGIServer/0.1 Python/2.7.13 ... { non_field_errors :[ Cliente j\u00e1 possui esta vers\u00e3o. ]} PUT - Editando um registro de atribui\u00e7\u00e3o de release Par\u00e2metros: nome tipo obrigat\u00f3rio? descri\u00e7\u00e3o customer string sim o identificador (uuid) de um cliente version string sim o identificador (uuid) de um release customer_id=5bb566f1-d259-4023-a064-6968a3c052f8 release_id=66c58e53-93f3-4df8-be02-c8670250f851 id=b567193a-a267-4bd0-8652-3c8e7b4ca4c5 curl -H 'Content-Type: application/json' -X 'PUT' 'http://127.0.0.1:8000/api/v1/publishing/$id' \\ -d '{ customer : $customer_id , release : $release_id }' Exemplo de retorno { uuid : b567193a-a267-4bd0-8652-3c8e7b4ca4c5 , customer : 5bb566f1-d259-4023-a064-6968a3c052f8 , release : 66c58e53-93f3-4df8-be02-c8670250f851 , pub_date : 2019-03-29T16:19:16.891829Z } Os demais poss\u00edveis retornos s\u00e3o os mesmos de quando estamos criando um registro via POST. DELETE - Excluindo recursos Para todos os recursos descritos acima, a exclus\u00e3o segue o mesmo padr\u00e3o de request: curl -X 'DELETE' 'http://127.0.0.1:8000/api/v1/{resource}/{id}'","title":"App Publishing endpoint"},{"location":"installation/","text":"Algumas palavaras chaves como: \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", e \"OPTIONAL\" que podem ocorrer nesse documento (mas traduzidas) s\u00e3o interpretadas como descritas no RFC 2119 . Instala\u00e7\u00e3o - intro Esta p\u00e1gina tem como inten\u00e7\u00e3o guiar no processo de instala\u00e7\u00e3o do projeto para uso API. A aplica\u00e7\u00e3o foi escrita em Python (vers\u00e3o 2.7) e Django Framework 1.11. Considera\u00e7\u00f5es iniciais O proceso de prepara\u00e7\u00e3o e instala\u00e7\u00e3o assume que voc\u00ea est\u00e1 em algum ambiente UNIX, preferencialmente, Linux. Apesar disso, n\u00e3o deveria ser um impeditivo tentar em ambiente como Windows, embora passos adicionais, n\u00e3o cobertos aqui, possam ser necess\u00e1rio. Todo o projeto foi desenvolvido e testado no GNU/Debian , vers\u00e3o 9. Preparando o ambiente Requerimentos inicias Python 2.7 (isso deveria ser compat\u00edvel com Python 3, mas n\u00e3o foi testado) GNU Make pip Git (opcional) - Necess\u00e1rio se a obten\u00e7\u00e3o so source-code \u00e9 via git clone (que \u00e9 o recomendado) SQLite 3 - Isso deveria vir por padr\u00e3o com o Python. Instalando o GNU Make Apesar de opcional para o projeto, as receitas do Makefile ajudam a automatizar ou reduzir algumas sequ\u00eancias de comandos. No entando, \u00e9 necess\u00e1rio ter o execut\u00e1vel do GNU Make no sistema (provavelmente voc\u00ea j\u00e1 o tenha, cheque: $ make --version ). Para obter informa\u00e7\u00f5es sobre como instalar o GNU Make, clique aqui . Se voc\u00ea est\u00e1 no Debian (ou Ubuntu ), por exemplo, o processo de instala\u00e7\u00e3o \u00e9 mais ou menos como isso: # Ubuntu seria: apt-get install build-essential $ apt install make $ make --version GNU Make 4.1 Compilado para x86_64-pc-linux-gnu Copyright (C) 1988-2014 Free Software Foundation, Inc. ... Uma vez que voc\u00ea se certificou que o make est\u00e1 instalado, voc\u00ea pode seguir para pr\u00f3xima se\u00e7\u00e3o e de fato instalar a aplica\u00e7\u00e3o e suas depend\u00eancias. Clonando e instalando as depend\u00eancias espec\u00edficas A primeira coisa que voc\u00ea deve ter em m\u00e3os \u00e9 o source-code do projeto. Se voc\u00ea n\u00e3o o recebeu como arquivo comprimido, ent\u00e3o clone o reposit\u00f3rio da seguinte URL: https://bitbucket.org/felipsmartins/fastsellerxt Clonando o reposit\u00f3rio \u00e9 a forma recomandada. Ent\u00e3o as instru\u00e7\u00f5es s\u00e3o: $ git clone https://bitbucket.org/felipsmartins/fastsellerxt $ cd fastsellerxt/ $ virtualenv --python=python2.7 virtualenv $ source virtualenv/bin/activate $ pip install -r requirements/prod.txt $ python manage.py migrate api Uma vez que tudo est\u00e1 instalado, tudo que voc\u00ea precisa fazer agora \u00e9 executar o built-in webserver e interagir com a API. $ python manage.py runserver # ou use make, se tiver configurado $ make serve Para onde ir agora? Agora que temos a aplica\u00e7\u00e3o rodando, voc\u00ea pode consultar a se\u00e7\u00e3o espec\u00edfica para ela. H\u00e1 uma p\u00e1gina espec\u00edfica descrevendo os endpoints da API . Gerando essa documenta\u00e7\u00e3o Essa se\u00e7\u00e3o \u00e9 destinada para aqueles que querem editar ou construir a documenta\u00e7\u00e3o a partir do source-code. Esses arquivos se encontram em sob o diret\u00f3rio docs/book . A documenta\u00e7\u00e3o \u00e9 constru\u00edda com a ferramenta mkdocs e podemos instal\u00e1-la via pip. Se voc\u00ea tem o make instalado e seu virtual environment est\u00e1 ativo, ent\u00e3o: $ make docs ou manualmente: $ pip install -r requirements/local.txt $ mkdocs build --clean","title":"Instala\u00e7\u00e3o"},{"location":"installation/#instalacao-intro","text":"Esta p\u00e1gina tem como inten\u00e7\u00e3o guiar no processo de instala\u00e7\u00e3o do projeto para uso API. A aplica\u00e7\u00e3o foi escrita em Python (vers\u00e3o 2.7) e Django Framework 1.11. Considera\u00e7\u00f5es iniciais O proceso de prepara\u00e7\u00e3o e instala\u00e7\u00e3o assume que voc\u00ea est\u00e1 em algum ambiente UNIX, preferencialmente, Linux. Apesar disso, n\u00e3o deveria ser um impeditivo tentar em ambiente como Windows, embora passos adicionais, n\u00e3o cobertos aqui, possam ser necess\u00e1rio. Todo o projeto foi desenvolvido e testado no GNU/Debian , vers\u00e3o 9.","title":"Instala\u00e7\u00e3o - intro"},{"location":"installation/#preparando-o-ambiente","text":"Requerimentos inicias Python 2.7 (isso deveria ser compat\u00edvel com Python 3, mas n\u00e3o foi testado) GNU Make pip Git (opcional) - Necess\u00e1rio se a obten\u00e7\u00e3o so source-code \u00e9 via git clone (que \u00e9 o recomendado) SQLite 3 - Isso deveria vir por padr\u00e3o com o Python. Instalando o GNU Make Apesar de opcional para o projeto, as receitas do Makefile ajudam a automatizar ou reduzir algumas sequ\u00eancias de comandos. No entando, \u00e9 necess\u00e1rio ter o execut\u00e1vel do GNU Make no sistema (provavelmente voc\u00ea j\u00e1 o tenha, cheque: $ make --version ). Para obter informa\u00e7\u00f5es sobre como instalar o GNU Make, clique aqui . Se voc\u00ea est\u00e1 no Debian (ou Ubuntu ), por exemplo, o processo de instala\u00e7\u00e3o \u00e9 mais ou menos como isso: # Ubuntu seria: apt-get install build-essential $ apt install make $ make --version GNU Make 4.1 Compilado para x86_64-pc-linux-gnu Copyright (C) 1988-2014 Free Software Foundation, Inc. ... Uma vez que voc\u00ea se certificou que o make est\u00e1 instalado, voc\u00ea pode seguir para pr\u00f3xima se\u00e7\u00e3o e de fato instalar a aplica\u00e7\u00e3o e suas depend\u00eancias.","title":"Preparando o ambiente"},{"location":"installation/#clonando-e-instalando-as-dependencias-especificas","text":"A primeira coisa que voc\u00ea deve ter em m\u00e3os \u00e9 o source-code do projeto. Se voc\u00ea n\u00e3o o recebeu como arquivo comprimido, ent\u00e3o clone o reposit\u00f3rio da seguinte URL: https://bitbucket.org/felipsmartins/fastsellerxt Clonando o reposit\u00f3rio \u00e9 a forma recomandada. Ent\u00e3o as instru\u00e7\u00f5es s\u00e3o: $ git clone https://bitbucket.org/felipsmartins/fastsellerxt $ cd fastsellerxt/ $ virtualenv --python=python2.7 virtualenv $ source virtualenv/bin/activate $ pip install -r requirements/prod.txt $ python manage.py migrate api Uma vez que tudo est\u00e1 instalado, tudo que voc\u00ea precisa fazer agora \u00e9 executar o built-in webserver e interagir com a API. $ python manage.py runserver # ou use make, se tiver configurado $ make serve Para onde ir agora? Agora que temos a aplica\u00e7\u00e3o rodando, voc\u00ea pode consultar a se\u00e7\u00e3o espec\u00edfica para ela. H\u00e1 uma p\u00e1gina espec\u00edfica descrevendo os endpoints da API .","title":"Clonando e instalando as depend\u00eancias espec\u00edficas"},{"location":"installation/#gerando-essa-documentacao","text":"Essa se\u00e7\u00e3o \u00e9 destinada para aqueles que querem editar ou construir a documenta\u00e7\u00e3o a partir do source-code. Esses arquivos se encontram em sob o diret\u00f3rio docs/book . A documenta\u00e7\u00e3o \u00e9 constru\u00edda com a ferramenta mkdocs e podemos instal\u00e1-la via pip. Se voc\u00ea tem o make instalado e seu virtual environment est\u00e1 ativo, ent\u00e3o: $ make docs ou manualmente: $ pip install -r requirements/local.txt $ mkdocs build --clean","title":"Gerando essa documenta\u00e7\u00e3o"}]}