{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vindo a documenta\u00e7\u00e3o do FastSeller XT Se voc\u00ea quer uma vis\u00e3o geral do projeto ou c\u00f3digo-fonte, visite github . Introdu\u00e7\u00e3o Este projeto \u00e9 sobre um sistema que tem como finalidade fazer a gest\u00e3o das vers\u00f5es publicadas/disponibilizadas do aplicativo FastSeller XT para os clientes/usu\u00e1rios deste sistema. Todas as a\u00e7\u00f5es principais para este gerenciamento \u00e9 feita atrav\u00e9s dos endpoints da API . Para onde ir agora? Para come\u00e7ar a interagir com a API, siga com as intru\u00e7\u00f5es de instala\u00e7\u00e3o na p\u00e1gina a seguir. Nota : \u00c9 interessante ler a se\u00e7\u00e3o a seguir para familiarizar-se com a terminologia usada durante a leitura da documenta\u00e7\u00e3o. Terminologia Customer: Um cliente, parceiro, empresa ou qualquer usu\u00e1rio que recebe um release. Release: Isso pode ter \u00e0s vezes o mesmo valor sem\u00e2ntico de \"vers\u00e3o\" (ver abaixo). Estritamente falando, release diz respeito a um lan\u00e7amento, que pode ter coomo atributo data do release , code name , c\u00f3digo da vers\u00e3o (ex.: 1.2.3) , etc. Vers\u00e3o : \u00c9 um identificador \"num\u00e9rico\" ou c\u00f3digo da vers\u00e3o do release, algo como 0.2.3 . Nesse projeto, tomamos como inspira\u00e7\u00e3o o Semantic Versioning . App Publishing : Representa um espec\u00edfico release do app disponibilizado para um usu\u00e1rio do app. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release.","title":"Primeiros passos"},{"location":"#bem-vindo-a-documentacao-do-fastseller-xt","text":"Se voc\u00ea quer uma vis\u00e3o geral do projeto ou c\u00f3digo-fonte, visite github .","title":"Bem-vindo a documenta\u00e7\u00e3o do FastSeller XT"},{"location":"#introducao","text":"Este projeto \u00e9 sobre um sistema que tem como finalidade fazer a gest\u00e3o das vers\u00f5es publicadas/disponibilizadas do aplicativo FastSeller XT para os clientes/usu\u00e1rios deste sistema. Todas as a\u00e7\u00f5es principais para este gerenciamento \u00e9 feita atrav\u00e9s dos endpoints da API . Para onde ir agora? Para come\u00e7ar a interagir com a API, siga com as intru\u00e7\u00f5es de instala\u00e7\u00e3o na p\u00e1gina a seguir. Nota : \u00c9 interessante ler a se\u00e7\u00e3o a seguir para familiarizar-se com a terminologia usada durante a leitura da documenta\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o"},{"location":"#terminologia","text":"Customer: Um cliente, parceiro, empresa ou qualquer usu\u00e1rio que recebe um release. Release: Isso pode ter \u00e0s vezes o mesmo valor sem\u00e2ntico de \"vers\u00e3o\" (ver abaixo). Estritamente falando, release diz respeito a um lan\u00e7amento, que pode ter coomo atributo data do release , code name , c\u00f3digo da vers\u00e3o (ex.: 1.2.3) , etc. Vers\u00e3o : \u00c9 um identificador \"num\u00e9rico\" ou c\u00f3digo da vers\u00e3o do release, algo como 0.2.3 . Nesse projeto, tomamos como inspira\u00e7\u00e3o o Semantic Versioning . App Publishing : Representa um espec\u00edfico release do app disponibilizado para um usu\u00e1rio do app. Tem informa\u00e7\u00f5es como a vers\u00e3o recebida pelo cliente, o pr\u00f3prio cliente e quando este recebeu o update/release.","title":"Terminologia"},{"location":"api/","text":"","title":"API"},{"location":"installation/","text":"Algumas palavaras chaves como: \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", e \"OPTIONAL\" que podem ocorrer nesse documento (mas traduzidas) s\u00e3o interpretadas como descritas no RFC 2119 . Instala\u00e7\u00e3o - intro Esta p\u00e1gina tem como inten\u00e7\u00e3o guiar no processo de instala\u00e7\u00e3o do projeto para uso API. A aplica\u00e7\u00e3o foi escrita em Python (vers\u00e3o 2.7) e Django Framework 1.11. Considera\u00e7\u00f5es iniciais O proceso de prepara\u00e7\u00e3o e instala\u00e7\u00e3o assume que voc\u00ea est\u00e1 em algum ambiente UNIX, preferencialmente, Linux. Apesar disso, n\u00e3o deveria ser um impeditivo tentar em ambiente como Windows, embora passos adicionais, n\u00e3o cobertos aqui, possam ser necess\u00e1rio. Todo o projeto foi desenvolvido e testado no GNU/Debian , vers\u00e3o 9. Preparando o ambiente Requerimentos inicias Python 2.7 (isso deveria ser compat\u00edvel com Python 3, mas n\u00e3o foi testado) GNU Make pip Git (opcional) - Necess\u00e1rio se a obten\u00e7\u00e3o so source-code \u00e9 via git clone (que \u00e9 o recomendado) SQLite 3 - Isso deveria vir por padr\u00e3o com o Python. Instalando o GNU Make Apesar de opcional para o projeto, as receitas do Makefile ajudam a automatizar ou reduzir algumas sequ\u00eancias de comandos. No entando, \u00e9 necess\u00e1rio ter o execut\u00e1vel do GNU Make no sistema (provavelmente voc\u00ea j\u00e1 o tenha, cheque: $ make --version ). Para obter informa\u00e7\u00f5es sobre como instalar o GNU Make, clique aqui . Se voc\u00ea est\u00e1 no Debian (ou Ubuntu ), por exemplo, o processo de instala\u00e7\u00e3o \u00e9 mais ou menos como isso: # Ubuntu seria: apt-get install build-essential $ apt install make $ make --version GNU Make 4.1 Compilado para x86_64-pc-linux-gnu Copyright (C) 1988-2014 Free Software Foundation, Inc. ... Uma vez que voc\u00ea se certificou que o make est\u00e1 instalado, voc\u00ea pode seguir para pr\u00f3xima se\u00e7\u00e3o e de fato instalar a aplica\u00e7\u00e3o e suas depend\u00eancias. Clonando e instalando as depend\u00eancias espec\u00edficas A primeira coisa que voc\u00ea deve ter em m\u00e3os \u00e9 o source-code do projeto. Se voc\u00ea n\u00e3o o recebeu como arquivo comprimido, ent\u00e3o clone o reposit\u00f3rio da seguinte URL: https://bitbucket.org/felipsmartins/fastsellerxt Clonando o reposit\u00f3rio \u00e9 a forma recomandada. Ent\u00e3o as instru\u00e7\u00f5es s\u00e3o: $ git clone https://bitbucket.org/felipsmartins/fastsellerxt $ cd fastsellerxt/ $ virtualenv --python=python2.7 virtualenv $ source virtualenv/bin/activate $ pip install -r requirements/prod.txt $ python manage.py migrate api Uma vez que tudo est\u00e1 instalado, tudo que voc\u00ea precisa fazer agora \u00e9 executar o built-in webserver e interagir com a API. $ python manage.py runserver # ou use make, se tiver configurado $ make serve Para onde ir agora? Agora que temos a aplica\u00e7\u00e3o rodando, voc\u00ea pode consultar a se\u00e7\u00e3o espec\u00edfica para ela. H\u00e1 uma p\u00e1gina espec\u00edfica descrevendo os endpoints da API . Gerando essa documenta\u00e7\u00e3o Essa se\u00e7\u00e3o \u00e9 destinada para aqueles que querem editar ou construir a documenta\u00e7\u00e3o a partir do source-code. Esses arquivos se encontram em sob o diret\u00f3rio docs/book . A documenta\u00e7\u00e3o \u00e9 constru\u00edda com a ferramenta mkdocs e podemos instal\u00e1-la via pip. Se voc\u00ea tem o make instalado e seu virtual environment est\u00e1 ativo, ent\u00e3o: $ make docs ou manualmente: $ pip install -r requirements/local.txt $ mkdocs build --clean","title":"Instala\u00e7\u00e3o"},{"location":"installation/#instalacao-intro","text":"Esta p\u00e1gina tem como inten\u00e7\u00e3o guiar no processo de instala\u00e7\u00e3o do projeto para uso API. A aplica\u00e7\u00e3o foi escrita em Python (vers\u00e3o 2.7) e Django Framework 1.11. Considera\u00e7\u00f5es iniciais O proceso de prepara\u00e7\u00e3o e instala\u00e7\u00e3o assume que voc\u00ea est\u00e1 em algum ambiente UNIX, preferencialmente, Linux. Apesar disso, n\u00e3o deveria ser um impeditivo tentar em ambiente como Windows, embora passos adicionais, n\u00e3o cobertos aqui, possam ser necess\u00e1rio. Todo o projeto foi desenvolvido e testado no GNU/Debian , vers\u00e3o 9.","title":"Instala\u00e7\u00e3o - intro"},{"location":"installation/#preparando-o-ambiente","text":"Requerimentos inicias Python 2.7 (isso deveria ser compat\u00edvel com Python 3, mas n\u00e3o foi testado) GNU Make pip Git (opcional) - Necess\u00e1rio se a obten\u00e7\u00e3o so source-code \u00e9 via git clone (que \u00e9 o recomendado) SQLite 3 - Isso deveria vir por padr\u00e3o com o Python. Instalando o GNU Make Apesar de opcional para o projeto, as receitas do Makefile ajudam a automatizar ou reduzir algumas sequ\u00eancias de comandos. No entando, \u00e9 necess\u00e1rio ter o execut\u00e1vel do GNU Make no sistema (provavelmente voc\u00ea j\u00e1 o tenha, cheque: $ make --version ). Para obter informa\u00e7\u00f5es sobre como instalar o GNU Make, clique aqui . Se voc\u00ea est\u00e1 no Debian (ou Ubuntu ), por exemplo, o processo de instala\u00e7\u00e3o \u00e9 mais ou menos como isso: # Ubuntu seria: apt-get install build-essential $ apt install make $ make --version GNU Make 4.1 Compilado para x86_64-pc-linux-gnu Copyright (C) 1988-2014 Free Software Foundation, Inc. ... Uma vez que voc\u00ea se certificou que o make est\u00e1 instalado, voc\u00ea pode seguir para pr\u00f3xima se\u00e7\u00e3o e de fato instalar a aplica\u00e7\u00e3o e suas depend\u00eancias.","title":"Preparando o ambiente"},{"location":"installation/#clonando-e-instalando-as-dependencias-especificas","text":"A primeira coisa que voc\u00ea deve ter em m\u00e3os \u00e9 o source-code do projeto. Se voc\u00ea n\u00e3o o recebeu como arquivo comprimido, ent\u00e3o clone o reposit\u00f3rio da seguinte URL: https://bitbucket.org/felipsmartins/fastsellerxt Clonando o reposit\u00f3rio \u00e9 a forma recomandada. Ent\u00e3o as instru\u00e7\u00f5es s\u00e3o: $ git clone https://bitbucket.org/felipsmartins/fastsellerxt $ cd fastsellerxt/ $ virtualenv --python=python2.7 virtualenv $ source virtualenv/bin/activate $ pip install -r requirements/prod.txt $ python manage.py migrate api Uma vez que tudo est\u00e1 instalado, tudo que voc\u00ea precisa fazer agora \u00e9 executar o built-in webserver e interagir com a API. $ python manage.py runserver # ou use make, se tiver configurado $ make serve Para onde ir agora? Agora que temos a aplica\u00e7\u00e3o rodando, voc\u00ea pode consultar a se\u00e7\u00e3o espec\u00edfica para ela. H\u00e1 uma p\u00e1gina espec\u00edfica descrevendo os endpoints da API .","title":"Clonando e instalando as depend\u00eancias espec\u00edficas"},{"location":"installation/#gerando-essa-documentacao","text":"Essa se\u00e7\u00e3o \u00e9 destinada para aqueles que querem editar ou construir a documenta\u00e7\u00e3o a partir do source-code. Esses arquivos se encontram em sob o diret\u00f3rio docs/book . A documenta\u00e7\u00e3o \u00e9 constru\u00edda com a ferramenta mkdocs e podemos instal\u00e1-la via pip. Se voc\u00ea tem o make instalado e seu virtual environment est\u00e1 ativo, ent\u00e3o: $ make docs ou manualmente: $ pip install -r requirements/local.txt $ mkdocs build --clean","title":"Gerando essa documenta\u00e7\u00e3o"}]}